// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PropsRenderer should render a table 1`] = `
<Consumer(Table)
  columns={
    Array [
      Object {
        "caption": "Prop name",
        "render": [Function],
      },
      Object {
        "caption": "Type",
        "render": [Function],
      },
      Object {
        "caption": "Default",
        "render": [Function],
      },
      Object {
        "caption": "Description",
        "render": [Function],
      },
    ]
  }
  getRowKey={[Function]}
  rows={
    Array [
      Object {
        "description": "",
        "name": "color",
        "required": false,
        "type": Object {
          "name": "string",
        },
      },
    ]
  }
/>
`;

exports[`props columns should render PropTypes.arrayOf 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        colors
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string[]
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.arrayOf(PropTypes.shape) 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foos
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        shape[]
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.instanceOf 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        num
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        Number
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.objectOf 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        colors
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        {string}
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.objectOf(PropTypes.shape) 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        colors
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        {shape}
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
             — 
            <Consumer(Text)
              color="light"
              size="small"
            >
              Required
            </Consumer(Text)>
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.oneOf 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        size
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        enum
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <span>
            One of:
             
            <Group
              inline={true}
              separator=", "
            >
              <Consumer(Code)
                key="\\"small\\""
              >
                small
              </Consumer(Code)>
              <Consumer(Code)
                key="\\"normal\\""
              >
                normal
              </Consumer(Code)>
              <Consumer(Code)
                key="\\"large\\""
              >
                large
              </Consumer(Code)>
            </Group>
          </span>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.oneOfType 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        union
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        union
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <span>
            One of type:
             
            <Group
              inline={true}
              separator=", "
            >
              <Consumer(Type)
                key="string-0"
              >
                string
              </Consumer(Type)>
              <Consumer(Type)
                key="number-1"
              >
                number
              </Consumer(Type)>
            </Group>
          </span>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.shape 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        shape
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
             — 
            <Consumer(Text)
              color="light"
              size="small"
            >
              Required
            </Consumer(Text)>
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.shape defaultProps, falling back to Object 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        shape
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
        title="somethingThatDoesntExist"
        underlined={true}
      >
        Shape
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
             — 
            <Consumer(Text)
              color="light"
              size="small"
            >
              Required
            </Consumer(Text)>
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.shape with description 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        shape
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
             — 
            <Consumer(Text)
              color="light"
              size="small"
            >
              Required
            </Consumer(Text)>
             — 
            <Markdown
              inline={true}
              text="Number"
            />
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
             — 
            <Markdown
              inline={true}
              text="Any"
            />
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.shape with formatted defaultProps 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        shape
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
        title="{
  bar: 123,
  baz: baz() {
          return 'foo';
      },
  bing: bing() {
          return 'badaboom';
      },
  trotskij: () => 1935,
  qwarc: {
    si: 'señor'
  }
}"
        underlined={true}
      >
        Shape
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <div
            key="bar"
          >
            <Consumer(Name)>
              bar
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              number
            </Consumer(Type)>
             — 
            <Consumer(Text)
              color="light"
              size="small"
            >
              Required
            </Consumer(Text)>
          </div>
          <div
            key="baz"
          >
            <Consumer(Name)>
              baz
            </Consumer(Name)>
            : 
            <Consumer(Type)>
              any
            </Consumer(Type)>
          </div>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.string 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        color
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.string with a default value 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        color
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Code)>
        pink
      </Consumer(Code)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render PropTypes.string.isRequired 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        color
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render arguments from JsDoc tags 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        size
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        number
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Markdown
          text="Test description"
        />
        <JsDoc
          arg={
            Array [
              Object {
                "description": "Converts foo to bar",
                "name": "Foo",
                "type": Object {
                  "name": "Array",
                },
              },
            ]
          }
          param={
            Array [
              Object {
                "name": "Bar",
              },
            ]
          }
        />
        <Consumer(Arguments)
          args={
            Array [
              Object {
                "description": "Converts foo to bar",
                "name": "Foo",
                "type": Object {
                  "name": "Array",
                },
              },
              Object {
                "name": "Bar",
              },
            ]
          }
          heading={true}
        />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render custom class type 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        React.ReactNode
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render description in Markdown 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        color
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Markdown
          text="Label"
        />
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render enum type when union of literals 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        enum
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <span>
            One of:
             
            <Group
              inline={true}
              separator=", "
            >
              <Consumer(Code)
                key="\\"bar\\""
              >
                bar
              </Consumer(Code)>
              <Consumer(Code)
                key="\\"baz\\""
              >
                baz
              </Consumer(Code)>
            </Group>
          </span>
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render function body in tooltip 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        fn
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        func
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
        title="(e) => console.log(e)"
        underlined={true}
      >
        Function
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render function defaultValue as code when null 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        fn
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        func
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Code)>
        null
      </Consumer(Code)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render function defaultValue as code when undefined 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        fn
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        func
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Code)>
        undefined
      </Consumer(Code)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render function type with body in tooltip 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        <Consumer(Text)
          size="small"
          title="() => void"
          underlined={true}
        >
          <Consumer(Type)>
            function
          </Consumer(Type)>
        </Consumer(Text)>
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render literal type 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        "bar"
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render name as deprecated when tag deprecated is present 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={true}
      >
        size
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        number
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Markdown
          text="Test description"
        />
        <JsDoc
          deprecated={
            Array [
              Object {
                "description": "Do not use.",
                "title": "deprecated",
              },
            ]
          }
        />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render object type with body in tooltip 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        <Consumer(Text)
          size="small"
          title="{ bar: string }"
          underlined={true}
        >
          <Consumer(Type)>
            object
          </Consumer(Type)>
        </Consumer(Text)>
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render optional type string 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render return from JsDoc tags 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        size
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        number
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Markdown
          text="Test description"
        />
        <JsDoc
          return={
            Array [
              Object {
                "description": "Returns foo from bar",
                "title": "Foo",
                "type": Object {
                  "name": "Array",
                },
              },
            ]
          }
        />
        <Consumer(Argument)
          description="Returns foo from bar"
          returns={true}
          title="Foo"
          type={
            Object {
              "name": "Array",
            }
          }
        />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render return from JsDoc tags 2`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        size
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        number
      </Consumer(Type)>
    </div>
    <div
      key="2"
    />
    <div
      key="3"
    >
      <div>
        <Markdown
          text="Test description"
        />
        <JsDoc
          returns={
            Array [
              Object {
                "description": "Returns foo from bar",
                "title": "Foo",
                "type": Object {
                  "name": "Array",
                },
              },
            ]
          }
        />
        <Consumer(Argument)
          description="Returns foo from bar"
          returns={true}
          title="Foo"
          type={
            Object {
              "name": "Array",
            }
          }
        />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render tuple type with body in tooltip 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        <Consumer(Text)
          size="small"
          title="[\\"bar\\", number]"
          underlined={true}
        >
          <Consumer(Type)>
            tuple
          </Consumer(Type)>
        </Consumer(Text)>
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render type string 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render type string with a default value 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        string
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Code)>
        bar
      </Consumer(Code)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render union type with body in tooltip 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        foo
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        <Consumer(Text)
          size="small"
          title="\\"bar\\" | number"
          underlined={true}
        >
          <Consumer(Type)>
            union
          </Consumer(Type)>
        </Consumer(Text)>
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Text)
        color="light"
        size="small"
      >
        Required
      </Consumer(Text)>
    </div>
    <div
      key="3"
    >
      <div>
        <Consumer(Para)>
          <span />
        </Consumer(Para)>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;

exports[`props columns should render unknown proptype for a prop when a relevant proptype is not assigned 1`] = `
<ul>
  <li
    key="0"
  >
    <div
      key="0"
    >
      <Consumer(Name)
        deprecated={false}
      >
        color
      </Consumer(Name)>
    </div>
    <div
      key="1"
    >
      <Consumer(Type)>
        unknown
      </Consumer(Type)>
    </div>
    <div
      key="2"
    >
      <Consumer(Code)>
        pink
      </Consumer(Code)>
    </div>
    <div
      key="3"
    >
      <div>
        <JsDoc />
      </div>
    </div>
  </li>
</ul>
`;
