// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render should not render title if name is not set 1`] = `<section />`;

exports[`render should render component 1`] = `
<section>
  <SectionHeading
    id="foo"
    slotName="sectionToolbar"
    slotProps={
      Object {
        "classes": Object {},
        "components": <Components
          components={Array []}
      />,
        "content": <Examples
          examples={
              Array [
                  Object {
                    "content": "<button>OK</button>",
                    "evalInContext": [Function],
                    "type": "code",
                  },
                  Object {
                    "content": "Hello *world*!",
                    "type": "markdown",
                  },
                ]
          }
          name="Foo"
      />,
        "name": "Foo",
        "sections": <Sections
          sections={Array []}
      />,
        "slug": "foo",
      }
    }
  >
    Foo
  </SectionHeading>
  <Examples
    examples={
      Array [
        Object {
          "content": "<button>OK</button>",
          "evalInContext": [Function],
          "type": "code",
        },
        Object {
          "content": "Hello *world*!",
          "type": "markdown",
        },
      ]
    }
    name="Foo"
  />
  <Components
    components={Array []}
  />
  <Sections
    sections={Array []}
  />
</section>
`;

exports[`render should render primary title if primary is set 1`] = `
<section>
  <SectionHeading
    id="test"
    primary={true}
    slotName="sectionToolbar"
    slotProps={
      Object {
        "classes": Object {},
        "name": "test",
        "primary": true,
        "slug": "test",
      }
    }
  >
    test
  </SectionHeading>
</section>
`;

exports[`render should render title if name is set 1`] = `
<section>
  <SectionHeading
    id="test"
    slotName="sectionToolbar"
    slotProps={
      Object {
        "classes": Object {},
        "name": "test",
        "slug": "test",
      }
    }
  >
    test
  </SectionHeading>
</section>
`;

exports[`should not render components list if not defined 1`] = `
<Styled(Section)
  isolated={false}
  name="No components"
  slug="no-components"
/>
`;

exports[`should not render sections if not defined 1`] = `
<Styled(Section)
  isolated={false}
  name="No sections"
  slug="no-sections"
/>
`;

exports[`should render component renderer 1`] = `
<Styled(Section)
  components={
    <Components
      components={Array []}
    />
  }
  content={
    <Examples
      examples={
        Array [
          Object {
            "content": "<button>OK</button>",
            "evalInContext": [Function],
            "type": "code",
          },
          Object {
            "content": "Hello *world*!",
            "type": "markdown",
          },
        ]
      }
      name="Foo"
    />
  }
  isolated={false}
  name="Foo"
  sections={
    <Sections
      sections={Array []}
    />
  }
  slug="foo"
/>
`;

exports[`should render component renderer with primary title 1`] = `
<Styled(Section)
  components={
    <Components
      components={Array []}
    />
  }
  content={
    <Examples
      examples={
        Array [
          Object {
            "content": "<button>OK</button>",
            "evalInContext": [Function],
            "type": "code",
          },
          Object {
            "content": "Hello *world*!",
            "type": "markdown",
          },
        ]
      }
      name="Foo"
    />
  }
  isolated={false}
  name="Foo"
  primary={true}
  sections={
    <Sections
      sections={Array []}
    />
  }
  slug="foo"
/>
`;

exports[`should render components list 1`] = `
<Styled(Section)
  components={
    <Components
      components={Array []}
    />
  }
  isolated={false}
  name="Components"
  slug="components"
/>
`;

exports[`should render sections if defined 1`] = `
<Styled(Section)
  isolated={false}
  name="Nested sections"
  sections={
    <Sections
      sections={Array []}
    />
  }
  slug="nested-sections"
/>
`;
